rules:
  # 카테고리 1, 2, 3, 4, 5는 이전과 동일하게 유지
  - id: "EXTERNAL_FILE_REFERENCE"
    description: "리소스(XIB, Storyboard, Plist, Assets) 또는 Obj-C 헤더에서 직접 참조되는 심볼"
    pattern:
      - find: { target: S }
      - where:
          - "S.isReferencedByExternalFile == true"
  - id: "OS_ENTRY_POINT_MAIN_ATTRIBUTE"
    description: "@main 속성이 붙은 앱의 진입점 타입"
    pattern:
      - find: { target: S }
      - where:
          - "S.attributes contains '@main'"
  - id: "OS_ENTRY_POINT_DELEGATES"
    description: "AppDelegate, SceneDelegate 등 OS가 이름으로 직접 참조하는 핵심 클래스"
    pattern:
      - find: { target: S }
      - where:
          - "S.name in ['AppDelegate', 'SceneDelegate']"
  - id: "OBJC_ATTRIBUTE"
    description: "@objc 또는 @objcMembers 속성으로 Objective-C 런타임에 노출된 심볼"
    pattern:
      - find: { target: S }
      - where:
          - "S.attributes contains_any ['@objc', '@objcMembers']"
  - id: "DYNAMIC_MODIFIER"
    description: "'dynamic' 수정자로 동적 디스패치가 강제된 심볼"
    pattern:
      - find: { target: S }
      - where:
          - "S.modifiers contains 'dynamic'"
  - id: "UI_CONTROLLER_CLASSES"
    description: "ViewController 또는 NavigationController 클래스들"
    pattern:
      - find: { target: C }
      - where:
          - "C.kind == 'class'"
          - "C.name contains 'Controller'"
  - id: "UI_VIEW_CLASSES"
    description: "이름에 'View'가 포함된 UI 관련 클래스 및 구조체"
    pattern:
      - find: { target: C }
      - where:
          - "C.kind in ['class', 'struct']"
          - "C.name contains 'View'"
  - id: "UI_CELL_CLASSES"
    description: "이름에 'Cell'이 포함된 UI 관련 클래스 및 구조체"
    pattern:
      - find: { target: C }
      - where:
          - "C.kind in ['class', 'struct']"
          - "C.name contains 'Cell'"
  - id: "SYSTEM_LIFECYCLE_AND_DELEGATE_METHODS"
    description: "시스템이 직접 호출하는 핵심 생명주기, 생성/소멸 및 델리게이트 메서드"
    pattern:
      - find: { target: M }
      - where:
          - "M.kind == 'method'"
          - "M.name in ['init', 'deinit', 'viewDidLoad', 'viewWillAppear', 'viewDidAppear', 'viewWillDisappear', 'viewDidDisappear', 'viewDidLayoutSubviews', 'touchesBegan', 'application', 'scene', 'sceneDidBecomeActive', 'sceneWillResignActive', 'sceneDidEnterBackground', 'sceneWillEnterForeground', 'collectionView', 'textFieldDidEndEditing', 'layoutSubviews', 'prepareForReuse']"
  - id: "COMMON_CONVENTION_PROPERTIES"
    description: "MVVM, RxSwift, UIKit 등에서 관례적으로 사용되는 핵심 프로퍼티 이름"
    pattern:
      - find: { target: P }
      - where:
          - "P.kind == 'property'"
          - "P.name in ['viewModel', 'disposeBag', 'reuseIdentifier', 'cancellable']"
  - id: "STANDARD_PROTOCOL_REQUIREMENTS"
    description: "Identifiable, LocalizedError 등 표준 프로토콜이 요구하는 프로퍼티"
    pattern:
      - find: { target: P }
      - where:
          - "P.kind == 'property'"
          - "P.name in ['id', 'errorDescription', 'recoverySuggestion', 'description', 'debugDescription', 'rawValue', 'body']"
  - id: "COMMON_CONVENTION_METHODS"
    description: "UseCase, Manager 등에서 관례적으로 사용되는 핵심 메서드 이름"
    pattern:
      - find: { target: M }
      - where:
          - "M.kind == 'method'"
          - "M.name in ['call', 'run', 'next', 'set', 'get', 'post', 'patch', 'delete', 'update', 'load', 'save', 'create', 'remove', 'insert', 'append']"

  # =======================================================================
  # 카테고리 6: 데이터 직렬화 및 모델 (🔥 수정됨)
  # =======================================================================
  - id: "CODABLE_WITHOUT_CODINGKEYS"
    description: "CodingKeys가 없는 Codable 타입의 프로퍼티"
    pattern:
      - find: { target: P }
      - where:
          - "P.kind == 'property'"
          # [수정] 부모(parent)의 모든 조상(superclass) 중 Codable을 채택한 것이 있는지 검사
          - "parent.superclass.name in ['Codable', 'Decodable', 'Encodable']"
          - not_exists:
              - "parent.child.name == 'CodingKeys'"

  # =======================================================================
  # 카테고리 7: 테스트 관련 심볼 (🔥 규칙 분리 및 강화)
  # =======================================================================
  - id: "TEST_CLASSES"
    description: "XCTestCase를 상속하거나 이름에 'Tests'가 포함된 테스트 클래스"
    pattern:
      - find: { target: C }
      - where:
          - "C.kind == 'class'"
          - "C.name contains 'Tests'"
          - "C.superclass.name == 'XCTestCase'"

  - id: "TEST_METHODS_BY_PREFIX"
    description: "이름이 'test'로 시작하는 테스트 메서드"
    pattern:
      - find: { target: M }
      - where:
          - "M.kind == 'method'"
          - "M.name starts_with 'test'"

  - id: "TEST_LIFECYCLE_METHODS"
    description: "setUp, tearDown 등 XCTest 생명주기 메서드"
    pattern:
      - find: { target: M }
      - where:
          - "M.kind == 'method'"
          - "M.name in ['setUp', 'tearDown', 'setUpWithError', 'tearDownWithError']"
          - "parent.superclass.name == 'XCTestCase'"

  # =======================================================================
  # 카테고리 8: 문맥 기반 일반 이름 (🔥 최종 강화)
  # =======================================================================
  - id: "COMMON_UI_PROPERTIES"
    description: "UIViewController 또는 UIView 서브클래스 내의 일반적인 UI 관련 프로퍼티"
    pattern:
      - find: { target: P }
      - where:
          - "P.kind == 'property'"
          - "P.name in ['delegate', 'dataSource', 'title', 'view', 'window', 'tableView', 'collectionView', 'button', 'imageView', 'titleLabel', 'contentView', 'refreshControl', 'backgroundView', 'header', 'footer']"
          # [수정] 부모(parent)의 모든 조상(superclass) 중 UIKit 핵심 클래스가 있는지 검사
          - "parent.superclass.name in ['UIViewController', 'UIView', 'UIResponder', 'UITableViewCell', 'UICollectionViewCell', 'UICollectionReusableView']"