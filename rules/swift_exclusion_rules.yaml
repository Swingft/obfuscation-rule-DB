rules:
  # =======================================================================
  # 카테고리 1: 직접 참조 및 진입점
  # =======================================================================
  - id: "EXTERNAL_FILE_REFERENCE"
    description: "리소스 또는 Obj-C 헤더에서 직접 참조되는 심볼"
    pattern:
      - find: { target: S }
      - where:
          - "S.isReferencedByExternalFile == true"

  - id: "OS_ENTRY_POINT_DELEGATES"
    description: "AppDelegate, SceneDelegate 등 OS가 이름으로 직접 참조하는 핵심 클래스"
    pattern:
      - find: { target: S }
      - where:
          - "S.name in ['AppDelegate', 'SceneDelegate']"

  - id: "OBJC_ATTRIBUTE"
    description: "@objc 또는 @objcMembers 속성으로 Objective-C 런타임에 노출된 심볼"
    pattern:
      - find: { target: S }
      - where:
          - "S.attributes contains_any ['@objc', '@objcMembers']"

  # =======================================================================
  # 카테고리 2: 상속 및 구현 (UIKit 프로젝트 핵심)
  # =======================================================================
  - id: "UI_FRAMEWORK_SUBCLASSES"
    description: "주요 UI 프레임워크 클래스의 모든 서브클래스"
    pattern:
      - find: { target: C }
      - where:
          - "C.kind in ['class', 'struct']"
          - "C.typeInheritanceChain contains_any ['UIViewController', 'UINavigationController', 'UITabBarController', 'UIView', 'UIResponder', 'UITableViewCell', 'UICollectionViewCell', 'UITableViewController', 'UICollectionReusableView']"

  - id: "SYSTEM_LIFECYCLE_AND_DELEGATE_METHODS"
    description: "시스템이 직접 호출하는 핵심 생명주기 및 델리게이트 메서드"
    pattern:
      - find: { target: M }
      - where:
          - "M.kind == 'method'"
          - "M.name in ['viewDidLoad', 'viewWillAppear', 'viewDidAppear', 'viewWillDisappear', 'viewDidDisappear', 'viewDidLayoutSubviews', 'viewWillLayoutSubviews', 'loadView', 'touchesBegan', 'touchesMoved', 'touchesEnded', 'touchesCancelled', 'application', 'scene', 'sceneDidBecomeActive', 'sceneWillResignActive', 'sceneDidEnterBackground', 'sceneWillEnterForeground', 'sceneDidDisconnect', 'textFieldDidEndEditing', 'textFieldDidBeginEditing', 'textFieldShouldReturn', 'textFieldDidChangeSelection', 'preferredStatusBarStyle', 'traitCollectionDidChange', 'layoutSubviews', 'prepareForReuse', 'scrollViewDidEndDecelerating', 'scrollViewWillEndDragging', 'scrollViewDidScroll']"
          - "M.typeInheritanceChain contains_any ['UIViewController', 'UIResponder', 'AppDelegate', 'SceneDelegate', 'UITextFieldDelegate', 'UIView', 'UITableViewCell', 'UICollectionViewCell', 'UIScrollViewDelegate']"

  # =======================================================================
  # 카테고리 3: 시스템 타입 (knownSystemTypes만)
  # =======================================================================
  - id: "SYSTEM_TYPE_NAMES"
    description: "Swift/Foundation/UIKit 표준 타입 이름 (시스템 심볼)"
    pattern:
      - find: { target: S }
      - where:
          - "S.isSystemSymbol == true"

  # =======================================================================
  # 카테고리 4: 표준 프로토콜 요구사항
  # =======================================================================
  - id: "STANDARD_PROTOCOL_REQUIREMENTS"
    description: "표준 프로토콜이 요구하는 프로퍼티/메서드"
    pattern:
      - find: { target: P }
      - where:
          - "P.kind in ['property', 'method']"
          - "P.name in ['id', 'errorDescription', 'recoverySuggestion', 'underlyingError', 'failureReason', 'helpAnchor', 'description', 'debugDescription', 'rawValue', 'hashValue', 'allCases']"

  - id: "CODABLE_PROPERTIES"
    description: "Codable을 준수하는 타입의 모든 프로퍼티"
    pattern:
      - find: { target: P }
      - where:
          - "P.kind == 'property'"
          - "P.parent.typeInheritanceChain contains_any ['Codable', 'Decodable', 'Encodable']"

  - id: "JSON_COMMON_PROPERTY_NAMES"
    description: "JSON/API 응답에서 흔히 사용되는 프로퍼티 이름"
    pattern:
      - find: { target: P }
      - where:
          - "P.kind == 'property'"
          - "P.name in ['accessToken', 'refreshToken', 'email', 'nickname', 'profileImageURL', 'createdAt', 'updatedAt', 'timestamp', 'statusCode', 'errorMessage', 'categories', 'items']"

  - id: "RAWREPRESENTABLE_ENUM_CASES"
    description: "RawRepresentable을 채택한 enum의 모든 case"
    pattern:
      - find: { target: E }
      - where:
          - "E.kind == 'enumCase'"
          - "E.parent.typeInheritanceChain contains 'RawRepresentable'"

  - id: "CODABLE_ENUM_CASES"
    description: "Codable을 채택한 enum의 모든 case"
    pattern:
      - find: { target: E }
      - where:
          - "E.kind == 'enumCase'"
          - "E.parent.typeInheritanceChain contains_any ['Codable', 'Decodable', 'Encodable']"

  - id: "CASEITERABLE_ENUM_CASES"
    description: "CaseIterable을 채택한 enum의 모든 case"
    pattern:
      - find: { target: E }
      - where:
          - "E.kind == 'enumCase'"
          - "E.parent.typeInheritanceChain contains 'CaseIterable'"

  # =======================================================================
  # 카테고리 5: 관례적 이름 (매우 보수적으로 축소)
  # =======================================================================
  - id: "COMMON_CONVENTION_PROPERTIES"
    description: "MVVM, RxSwift/Combine 등에서 관례적으로 사용되는 프로퍼티 이름"
    pattern:
      - find: { target: P }
      - where:
          - "P.kind == 'property'"
          - "P.name in ['viewModel', 'disposeBag', 'coordinator', 'repository', 'cancellable', 'delegate', 'dataSource', 'locationManager', 'semaphore', 'reuseIdentifier']"

  - id: "VERY_COMMON_PROPERTY_NAMES"
    description: "문맥에 상관없이 안전하게 제외해야 하는 매우 일반적인 프로퍼티 이름"
    pattern:
      - find: { target: P }
      - where:
          - "P.kind == 'property'"
          - "P.name in ['id', 'key', 'name', 'title', 'titleLabel', 'message', 'data', 'date', 'url', 'path', 'token', 'user', 'error', 'result', 'value', 'type', 'status', 'state', 'items', 'image', 'view', 'button', 'label', 'imageView', 'tableView', 'collectionView', 'contentView', 'frame', 'bounds', 'center', 'window', 'text', 'font', 'color', 'backgroundColor', 'alpha', 'placeholder', 'height', 'width', 'alert', 'index', 'layout', 'colors', 'appearance', 'setting', 'stackView', 'mapView', 'refreshControl', 'viewController', 'collectionViewLayout', 'maskLayer', 'barAppearance']"

  - id: "COMMON_METHOD_NAMES"
    description: "관례적으로 사용되거나 재정의될 가능성이 높은 일반적인 메서드 이름"
    pattern:
      - find: { target: M }
      - where:
        - "M.kind == 'method'"
        - "M.name in ['configure', 'setup', 'get', 'set', 'add', 'remove', 'insert', 'append', 'pop', 'save', 'load', 'update', 'draw', 'run', 'activate', 'apply', 'clear', 'reset', 'next', 'showAlert', 'cancelAction', 'deleteAllItems', 'resizableImage', 'rotate', 'getIsInBusiness', 'doneButton', 'call']"

  # =======================================================================
  # 카테고리 6: 델리게이트 패턴
  # =======================================================================
  - id: "DELEGATE_PATTERN_PROPERTIES"
    description: "델리게이트 패턴에서 사용되는 프로퍼티"
    pattern:
      - find: { target: P }
      - where:
          - "P.kind == 'property'"
          - "P.name contains 'delegate'"

  - id: "DELEGATE_PATTERN_PROPERTIES_DATASOURCE"
    description: "데이터소스 패턴에서 사용되는 프로퍼티"
    pattern:
      - find: { target: P }
      - where:
          - "P.kind == 'property'"
          - "P.name contains 'dataSource'"

  # =======================================================================
  # 카테고리 7: UIKit 델리게이트 메서드
  # =======================================================================
  - id: "UITABLEVIEW_DELEGATE_METHODS"
    description: "UITableView 델리게이트/데이터소스 메서드"
    pattern:
      - find: { target: M }
      - where:
          - "M.kind == 'method'"
          - "M.name in ['numberOfSections', 'numberOfRowsInSection', 'cellForRowAt', 'didSelectRowAt', 'heightForRowAt', 'estimatedHeightForRowAt']"
          - "M.typeInheritanceChain contains_any ['UITableViewDataSource', 'UITableViewDelegate', 'UIViewController']"

  - id: "UICOLLECTIONVIEW_DELEGATE_METHODS"
    description: "UICollectionView 델리게이트/데이터소스 메서드"
    pattern:
      - find: { target: M }
      - where:
          - "M.kind == 'method'"
          - "M.name in ['numberOfSections', 'numberOfItemsInSection', 'cellForItemAt', 'didSelectItemAt', 'sizeForItemAt']"
          - "M.typeInheritanceChain contains_any ['UICollectionViewDataSource', 'UICollectionViewDelegate', 'UIViewController']"

  # =======================================================================
  # 카테고리 8: 핵심 언어 기능
  # =======================================================================
  - id: "INITIALIZERS_AND_OPERATORS"
    description: "모든 생성자(init) 및 연산자 (==, !=, +, - 등)"
    pattern:
      - find: { target: S }
      - where:
          - "S.kind in ['initializer', 'operator']"

  - id: "EQUATABLE_OPERATORS"
    description: "Equatable 프로토콜의 == 연산자"
    pattern:
      - find: { target: M }
      - where:
          - "M.kind == 'method'"
          - "M.name == '=='"

  # =======================================================================
  # 카테고리 9: NSCoding 관련
  # =======================================================================
  - id: "NSCODING_CLASSES_AND_MEMBERS"
    description: "NSCoding/NSSecureCoding을 채택한 클래스의 모든 멤버"
    pattern:
      - find: { target: M }
      - where:
          - "M.kind in ['property', 'method']"
          - "M.parent.typeInheritanceChain contains_any ['NSCoding', 'NSSecureCoding']"

  # =======================================================================
  # 카테고리 10: 데이터베이스 관련
  # =======================================================================
  - id: "MODEL_ANNOTATION_CLASSES"
    description: "@Model 어노테이션이 붙은 클래스의 모든 멤버 (SwiftData)"
    pattern:
      - find: { target: M }
      - where:
          - "M.kind in ['property', 'method']"
          - "M.parent.attributes contains '@Model'"

  - id: "NSMANAGED_PROPERTIES"
    description: "@NSManaged 속성이 붙은 프로퍼티 (CoreData)"
    pattern:
      - find: { target: P }
      - where:
          - "P.kind == 'property'"
          - "P.attributes contains '@NSManaged'"

  # =======================================================================
  # 카테고리 11: 테스트 관련
  # =======================================================================
  - id: "TEST_CLASSES_AND_METHODS"
    description: "XCTestCase를 상속하는 테스트 클래스와 test로 시작하는 메서드"
    pattern:
      - find: { target: S }
      - where:
          - "S.kind in ['class', 'method']"
          - "S.name starts_with 'test'"

  - id: "SETUP_TEARDOWN_METHODS"
    description: "테스트 setup/teardown 메서드"
    pattern:
      - find: { target: M }
      - where:
          - "M.kind == 'method'"
          - "M.name in ['setUp', 'tearDown', 'setUpWithError', 'tearDownWithError']"

  # =======================================================================
  # 카테고리 12: CoreGraphics 구조체 멤버 (보수적 접근)
  # =======================================================================
  - id: "COREGRAPHICS_STRUCT_MEMBERS"
    description: "CGAffineTransform 등 CoreGraphics 구조체의 public 멤버"
    pattern:
      - find: { target: P }
      - where:
          - "P.kind == 'property'"
          - "P.name in ['a', 'b', 'c', 'd', 'tx', 'ty', 'x', 'y', 'width', 'height']"
          - "P.parent.name in ['CGAffineTransform', 'CGPoint', 'CGSize', 'CGRect']"

  # =======================================================================
  # 카테고리 13: SwiftUI 관련 (신규 추가)
  # =======================================================================
  - id: "SWIFTUI_VIEW_TYPES"
    description: "SwiftUI View 관련 타입들"
    pattern:
      - find: { target: S }
      - where:
          - "S.kind in ['class', 'struct']"
          - "S.typeInheritanceChain contains 'View'"

  - id: "SWIFTUI_COMMON_PROPERTIES"
    description: "SwiftUI에서 관례적으로 사용되는 프로퍼티"
    pattern:
      - find: { target: P }
      - where:
          - "P.kind == 'property'"
          - "P.name in ['body', 'content', 'binding', 'dismiss', 'preview', 'previews', 'liveValue', 'testValue', 'previewValue', 'placeholder']"

  - id: "SWIFTUI_ENVIRONMENT_KEYS"
    description: "SwiftUI Environment 및 Dependency 키"
    pattern:
      - find: { target: S }
      - where:
          - "S.kind in ['struct', 'class']"
          - "S.name in ['EnvironmentValues', 'DependencyValues', 'Key']"

  - id: "SWIFTUI_APP_PROTOCOL"
    description: "SwiftUI App 프로토콜을 채택한 구조체"
    pattern:
      - find: { target: S }
      - where:
          - "S.kind == 'struct'"
          - "S.typeInheritanceChain contains 'App'"

  # =======================================================================
  # 카테고리 14: 추가 시스템 타입 및 확장
  # =======================================================================
  - id: "FOUNDATION_NOTIFICATION_NAMES"
    description: "Notification.Name 확장"
    pattern:
      - find: { target: S }
      - where:
          - "S.name == 'Notification.Name'"

  - id: "COREGRAPHICS_TRANSFORM_MEMBERS_EXTENDED"
    description: "CGAffineTransform의 행렬 성분 (확장)"
    pattern:
      - find: { target: P }
      - where:
          - "P.kind == 'property'"
          - "P.name in ['m1', 'm11', 'm12', 'm2']"
          - "P.parent.name == 'CGAffineTransform'"

  - id: "REACTIVE_EXTENSIONS"
    description: "Reactive 확장 (RxSwift 등)"
    pattern:
      - find: { target: S }
      - where:
          - "S.name == 'Reactive'"

  - id: "ATTRIBUTED_STRING_PROPERTIES"
    description: "AttributedString 관련 프로퍼티"
    pattern:
      - find: { target: P }
      - where:
          - "P.kind == 'property'"
          - "P.name in ['attrString', 'paragraphStyle']"

  - id: "SYSTEM_COLLECTION_TYPES"
    description: "Swift 시스템 컬렉션 타입"
    pattern:
      - find: { target: S }
      - where:
          - "S.kind in ['struct', 'class']"
          - "S.name in ['Array', 'Sequence']"

  - id: "MAPKIT_PROTOCOL_REQUIREMENTS"
    description: "MapKit 프로토콜 요구사항"
    pattern:
      - find: { target: P }
      - where:
          - "P.kind == 'property'"
          - "P.name in ['coordinate', 'region', 'placemark']"

  - id: "VERY_COMMON_PROPERTY_NAMES_EXTENDED"
    description: "추가로 매우 흔한 프로퍼티 이름들"
    pattern:
      - find: { target: P }
      - where:
          - "P.kind == 'property'"
          - "P.name in ['rect', 'isSelected', 'custom', 'menu', 'business_hours', 'last_order', 'holiday', 'rest_hours', 'parking', 'cost_range', 'restaurant_name', 'feeling_tags', 'image_urls', 'star', 'approved']"